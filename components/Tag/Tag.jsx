/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';
import useTag from 'components/Tag/useTag';

const TagNormal = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
  })(({ data }) => ({
    backgroundColor: `rgba(38, 62, 63, 1)`,
    borderRadius: `25px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `center`,
    alignItems: `center`,
    padding: `6px 14px`,
    boxSizing: `border-box`,
    height: 'auto',
    width: 'fit-content',
  }))
);

const Value = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: `rgba(255, 255, 255, 1)`,
  fontStyle: theme.typography['Typography']['Body 2'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 2'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 2'].fontWeight,
  fontSize: theme.typography['Typography']['Body 2'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 2'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 2'].lineHeight,
  textDecoration: theme.typography['Typography']['Body 2'].textDecoration,
  textTransform: theme.typography['Typography']['Body 2'].textTransform,
  margin: `0px`,
}));

function Tag(props) {
  const { data, fns } = useTag(props);

  const TagNormaltagnormal = { backgroundColor: `rgba(38, 62, 63, 1)` };
  const TagNormaltagHover = { backgroundColor: `rgba(49, 80, 81, 1)` };
  const [TagNormalStateStyles, TagNormalStateApi] = useSpring(() => ({
    from: eval('TagNormal' + data.currentVariant),
    config: { duration: 1000 },
    delay: 500,
  }));

  const switchStateTotagnormal = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    TagNormalStateApi.start({
      ...TagNormaltagnormal,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };

  const switchStateTotagHover = (
    duration = 0,
    delay = 0,
    easing = 'linear'
  ) => {
    TagNormalStateApi.start({
      ...TagNormaltagHover,
      delay,
      config: { duration, easing: easings[easing] },
    });
  };
  return (
    <TagNormal
      onMouseLeave={() => {
        eval('switchStateTo' + data.previousVariant)(
          0.25 * 1000,
          0.1 * 1000,
          'easeInOutQuad'
        );
        fns.setPreviousVariant('tagHover');
        fns.setCurrentVariant(data.previousVariant);
      }}
      onMouseEnter={() => {
        switchStateTotagHover(0.25 * 1000, 0.1 * 1000, 'easeInOutQuad');
        fns.setPreviousVariant(data.currentVariant);
        fns.setCurrentVariant('tagHover');
      }}
      className={props.className}
      data={data}
      style={{ ...TagNormalStateStyles }}
    >
      <Value>{props.badgeText}</Value>
    </TagNormal>
  );
}

export default Tag;
